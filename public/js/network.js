// httpsCallable â†’ permite chamar FunÃ§Ãµes Cloud diretamente do frontend (javascript) via HTTP, de forma segura e autenticada
import { httpsCallable } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-functions.js";

// functions â†’ permite chamar Cloud Functions configuradas no Firebase
import { functions } from './firebase-setup.js';

// addDoc â†’ adiciona novos documentos; serverTimestamp â†’ gera timestamp confiÃ¡vel do servidor no Firestore
import { addDoc, serverTimestamp, doc, updateDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

// chatsCollection â†’ referÃªncia central Ã  coleÃ§Ã£o "chats" no Firestore para armazenar mensagens
import { chatsCollection } from './state.js';

//Imports de UI  - funÃ§Ãµes
import { showLoading, hideLoading, sendSystemMessage } from './ui.js';

import { db } from './firebase-setup.js';
import { collection, getDocs, deleteDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";


// FunÃ§Ã£o assÃ­ncrona para enviar mensagem Ã  Cloud Function do Firebase, aguardando resposta do Gemini
export async function sendMessageToGemini(userMessage, promptInput, sendButton, userName) {

    console.log("[NET][CALL] FunÃ§Ã£o sendMessageToGemini chamada");  //Marca o inÃ­cio da funÃ§Ã£o

    // Valida se a mensagem estÃ¡ vazia ou composta sÃ³ de espaÃ§os
    if (!userMessage) {
        console.log("[NET][CHECK] userMessage vazio ou invÃ¡lido:", userMessage);

        alert("Erro. Por favor digite uma mensagem");  // Abre janela de erro na tela do usuÃ¡rio.

        return;  // Encerra a execuÃ§Ã£o, pois nÃ£o faz sentido prosseguir com o input vazio
    }

    console.log("[NET][CHECK] userMessage vÃ¡lido:", userMessage);

    // Limpa o campo de input apÃ³s capturar a mensagem
    promptInput.value = '';  
    console.log("[NET][UPDATE] promptInput limpo");

    // Desabilita o input e o botÃ£o para evitar mÃºltiplos envios simultÃ¢neos 
    // Funciona como um mecanismo simples de anti-flood para evitar abusos de mÃºltiplas requisiÃ§Ãµes

    showLoading(); // Mostra o loading
    console.log("[NET][CALL] FunÃ§Ã£o showLoading()");
    
    promptInput.disabled = true;  // desativa campo de prompt
    sendButton.disabled = true; // desativa botÃ£o de enviar

    console.log("[NET][UPDATE] promptInput e sendButton desativados");

    try {
        console.log("[NET][INIT] Preparando payload");  

        // Monta o objeto 'payload' contendo os dados necessÃ¡rios para serem enviados ao backend
        const payload = {
            prompt: userMessage,  // Mensagem que serÃ¡ enviada Ã  API do Gemini
            sessionId: "sess-" + crypto.randomUUID(),  // Gera um ID de sessÃ£o aleatÃ³rio para rastreamento
            userAgent: navigator.userAgent, // Captura informaÃ§Ãµes do navegador do usuÃ¡rio (para logging ou anÃ¡lise)
            userName: userName
        };

        console.log("[NET][INIT] Payload criado :", payload , "| typeof:", typeof payload);

        // ObtÃ©m uma referÃªncia para a funÃ§Ã£o em nuvem chamada 'sendMessage'
        const callSendMessage = httpsCallable(functions, 'sendMessage');

        console.log("[NET][INIT] VariÃ¡vel callSendMessage declarada , executa httpsCallable");

        console.log("[NET][INIT] Iniciando variÃ¡vel result para aguardar resposta");

        // Executa a chamada assÃ­ncrona Ã  funÃ§Ã£o do backend, passando o payload
        const result = await callSendMessage(payload);

        if (!result) {

            console.error("[NET][ERROR] NÃ£p conseguiu obter result: ", result, "| typeof:", typeof result);
    return;
}

        console.log("[NET][RETURN] Resposta recebida (result): ", result ,"| typeof:", typeof result);


    } catch (error) {
        // Captura erros: problemas de rede, falhas no backend ou erros da API do Gemini
        console.error("[NET][ERROR] Erro ao chamar a funÃ§Ã£o Firebase sendMessage: ", error);

    } finally {
        // Executa sempre: reativa a interface do usuÃ¡rio, permitindo novos envios
        promptInput.disabled = false;  
        sendButton.disabled = false;

        console.log("[NET][UPDATE] promptInput e sendButton reativados");

        hideLoading();

        // Coloca o foco de volta no input para melhorar a experiÃªncia do usuÃ¡rio
        promptInput.focus();  

        console.log("[NET][UPDATE] promptInput focado");
    }
}

// FunÃ§Ã£o sendMessageChat â†’ grava uma nova mensagem diretamente na coleÃ§Ã£o "chats" do Firestore
// Usada para armazenar mensagens pÃºblicas enviadas pelo usuÃ¡rio, sem processamento da API Gemini
export async function sendMessageChat(userMessage, promptInput, sendButton, userName) {

    console.log("[NET][CALL] sendMessageChat foi chamada");

    console.log("[NET][UPDATE]] preparando para desabilitar promptInput e sendButton");


    promptInput.disabled = true;
    sendButton.disabled = true;

    console.log("[NET][UPDATE]] promptInput e sendButton desabilitados");

    showLoading();  // Mostra loading

    console.log("[NET][CALL]] FunÃ§Ã£o showLoading() chamada");


    console.log("[NET][INIT]] iniciando bloco try para executar addDoc com chatsCollection como parametro");

    try {
        await addDoc(chatsCollection, {  
            prompt: userMessage,                // Armazena o texto enviado pelo usuÃ¡rio
            response: null,                // Define como null â†’ pois nÃ£o hÃ¡ resposta automÃ¡tica (nÃ£o passou pelo Gemini)
            sessionId: crypto.randomUUID(), // Gera um ID de sessÃ£o seguro e Ãºnico via Web Crypto API
            timestamp: serverTimestamp(),    // Timestamp gerado pelo servidor â†’ evita inconsistÃªncia com o relÃ³gio do cliente
            userAgent: navigator.userAgent, // Registra informaÃ§Ãµes sobre o dispositivo/navegador do usuÃ¡rio
            userName: userName
        });

        console.log("[NET][SUCCESS] Mensagem enviada com sucesso para Firestore."); 
        // Log de sucesso â†’ facilita monitoramento e debugging

    } catch (error) {
        console.error("[NET][ERROR] Falha ao enviar mensagem no chat:", error); 
        // Log de erro tÃ©cnico para desenvolvedor

        alert("Erro ao enviar a mensagem. Por favor, tente novamente.");  
        // Feedback visual para o usuÃ¡rio â†’ melhora a experiÃªncia em caso de falha
    } finally {


        console.log("[NET][UPDATE]] preparando para ativar novamente promptInput e sendButton");

        promptInput.disabled = false;   // Reativa o input â†’ permite nova interaÃ§Ã£o do usuÃ¡rio
        sendButton.disabled = false;    // Reativa o botÃ£o â†’ pronto para novos envios

        console.log("[NET][UPDATE]] promptInput e sendButton reativados");

        hideLoading(); // Oculta o indicador de loading â†’ operaÃ§Ã£o concluÃ­da

        console.log("[NET][CALL]] FunÃ§Ã£o hideLoading() chamada");

        promptInput.focus(); // Foco automÃ¡tico no input â†’ melhora a experiÃªncia e agilidade do usuÃ¡rio
}
}

// editMessage â†’ atualiza o conteÃºdo de uma mensagem especÃ­fica no Firestore com o novo texto
export async function editMessage(messageId, newText) {

    const messageRef = doc(db, 'chats', messageId);  
    // Cria uma referÃªncia direta ao documento no Firestore com base no ID

    await updateDoc(messageRef, { text: newText });  
    // Atualiza o campo 'text' do documento com o novo conteÃºdo de forma assÃ­ncrona

    console.log('Mensagem editada');  
    // Log de confirmaÃ§Ã£o para debugging

    location.reload();  
    // ForÃ§a recarregamento da pÃ¡gina para refletir a mudanÃ§a de forma rÃ¡pida e simplificada
    
}

// nukeDatabase â†’ deleta todos documentos da coleÃ§Ã£o 'chats' no Firestore
export async function nukeDatabase() {
    console.log("[NET][CALL] FunÃ§Ã£o nukeDatabase chamada");

    const confirmNuke = confirm("Tem certeza? Vai apagar TUDO!");
    console.log("[NET][INIT] confirmNuke:", confirmNuke, "| typeof:", typeof confirmNuke);

    if (confirmNuke) {
        console.log("[NET][CHECK] UsuÃ¡rio confirmou a exclusÃ£o em massa");

        const messagesCollection = collection(db, 'chats');
        console.log("[NET][INIT] messagesCollection:", messagesCollection);

        try {
            const snapshot = await getDocs(messagesCollection);
            console.log("[NET][RETURN] Snapshot de messages recebido:", snapshot);

            snapshot.forEach((document) => {
                console.log("[NET][ITERATE] Deletando doc.id:", document.id);

                deleteDoc(doc(db, 'chats', document.id))
                    .then(() => {
                        console.log("[NET][UPDATE] Documento deletado com sucesso:", document.id);
                    })
                    .catch((deleteError) => {
                        console.error("[NET][ERROR] Erro ao deletar doc.id:", document.id, "| Erro:", deleteError);
                    });
            });

            // Mensagem visual de sistema
            sendSystemMessage("ðŸ’£ Banco apagado pelo admin.");
        } catch (getError) {
            console.error("[NET][ERROR] Erro ao obter snapshot de messages:", getError);
        }
    } else {
        console.log("[NET][CHECK] UsuÃ¡rio cancelou a exclusÃ£o em massa");
    }
}


